{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tarea 2, Cuadratura Gaussiana.","text":"<p>La cuadratura Gaussiana es un m\u00e9todo usado para cacular aproximaciones de integrales, con la ventaja que, al utilizar un orden N lo suficientemente grande, se obtiene el valor exacto de la integral, esto ocurre cuando 2*N-1 es igual o mayor al grado de la funci\u00f3n a integrar</p>"},{"location":"explanation/","title":"Cuadratura Gaussiana","text":"<p>Este documento explica c\u00f3mo se implementa y utiliza la cuadratura gaussiana en el proyecto.</p>"},{"location":"explanation/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>La cuadratura gaussiana es un m\u00e9todo num\u00e9rico para aproximar integrales definidas. En lugar de usar puntos igualmente espaciados como en el m\u00e9todo del trapecio o Simpson, se eligen nodos y pesos de forma que la integral sea exacta para polinomios hasta cierto grado.</p> <p>En este caso usamos los polinomios de Legendre, que proporcionan los puntos de integraci\u00f3n adecuados en el intervalo est\u00e1ndar <code>[-1, 1]</code>.</p> <p>En el caso de la integral dada, el N que logra la exactitud es N = 4.</p>"},{"location":"explanation/#2-formula-general","title":"2. F\u00f3rmula general","text":"<p>La integral:</p>  I = \\int_a^b f(x)\\,dx  <p>se aproxima como:</p>  I \\approx \\sum_{i=1}^{N} w_i \\, f(x_i)  <p>donde:</p> <ul> <li> <p> x_i  son los nodos transformados al intervalo [a, b],</p> </li> <li> <p> w_i  son los pesos correspondientes.</p> </li> </ul>"},{"location":"explanation/#3-codigo-en-python","title":"3. C\u00f3digo en Python","text":""},{"location":"explanation/#scriptpy","title":"Script.py","text":"<p>import matplotlib.pyplot as plt</p> <p>import numpy as np</p> <p>def gaussxw(N):</p> <pre><code>x, w = np.polynomial.legendre.leggauss(N)\n\n\nreturn x, w\n</code></pre> <p>def gaussxwab(a, b, x, w):</p> <pre><code>return 0.5 * (b - a) * x + 0.5 * (b + a), 0.5 * (b - a) * w\n</code></pre> <p>def func(x):</p> <pre><code>return x ** 6 - (x**2) * np.sin(2*x)\n</code></pre>"},{"location":"explanation/#mainpy","title":"Main.py","text":"<p>for i in range(1, 10):  </p> <pre><code>N2X, N2W = gaussxw(i)\n\nN2X, N2W = gaussxwab(1, 3, N2X, N2W)\n\nValIntN2 = np.dot(N2W, func(N2X))\n\nprint(\"N = \", i, \"   Valor I =  \", ValIntN2)\n</code></pre>"},{"location":"reference/","title":"Referencias","text":""},{"location":"reference/#Code.Script.func","title":"<code>func(x)</code>","text":"<p>Funci\u00f3n a integrar</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; func(0.0)\n0.0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>Primer argumento</p> required <p>Returns:</p> Name Type Description <code>y</code> <code>float</code> <p>Retorn la imagen de la funci\u00f3n a integrar.</p> Source code in <code>Code/Script.py</code> <pre><code>def func(x):\n\"\"\"Funci\u00f3n a integrar\n\n    Examples:\n        &gt;&gt;&gt; func(0.0)\n        0.0\n\n    Args:\n        x (float): Primer argumento\n\n    Returns:\n       y (float): Retorn la imagen de la funci\u00f3n a integrar.\n\n    \"\"\"\n    return x ** 6 - (x**2) * np.sin(2*x)\n</code></pre>"},{"location":"reference/#Code.Script.gaussxw","title":"<code>gaussxw(N)</code>","text":"<p>Calculo de polinomio de legendre.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; gaussxw(4)\n(1.0, 2.0, 3.0), ( 4.0, 5.0, 6.0)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>First argument</p> required <p>Returns:</p> Name Type Description <code>Legendre</code> <code>array</code> <p>Retorna los valores x y w obtenidos por la transformaci\u00f3n de legendre.</p> Source code in <code>Code/Script.py</code> <pre><code>def gaussxw(N):\n\"\"\"Calculo de polinomio de legendre.\n\n    Examples:\n        &gt;&gt;&gt; gaussxw(4)\n        (1.0, 2.0, 3.0), ( 4.0, 5.0, 6.0)\n\n    Args:\n        a (int): First argument\n\n    Returns:\n        Legendre (array): Retorna los valores x y w obtenidos por la transformaci\u00f3n de legendre.\n\n    \"\"\"\n    x, w = np.polynomial.legendre.leggauss(N)\n\n    return x, w\n</code></pre>"},{"location":"reference/#Code.Script.gaussxwab","title":"<code>gaussxwab(a, b, x, w)</code>","text":"<p>Ajuste de los pesos y puntos de muestreo seg\u00fan los interv\u00e1los.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; x, w = np.array([0.0, 0.5]), np.array([1.0, 1.0])\n&gt;&gt;&gt; gaussxwab(1, 3, x, w)\n(array([1., 2.]), array([1., 1.]))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>Primer argumento</p> required <code>b</code> <code>float</code> <p>Segundo argumento</p> required <code>x</code> <code>array</code> <p>Tercer argumento</p> required <code>w</code> <code>array</code> <p>Cuarto argumento</p> required <p>Returns:</p> Name Type Description <code>Arrays</code> <code>array</code> <p>Retorna dos arrays, con el ajuste de los vectores a los intervalos dados</p> Source code in <code>Code/Script.py</code> <pre><code>def gaussxwab(a, b, x, w):\n\"\"\"Ajuste de los pesos y puntos de muestreo seg\u00fan los interv\u00e1los.\n\n    Examples:\n        &gt;&gt;&gt; x, w = np.array([0.0, 0.5]), np.array([1.0, 1.0])\n        &gt;&gt;&gt; gaussxwab(1, 3, x, w)\n        (array([1., 2.]), array([1., 1.]))\n\n    Args:\n        a (float): Primer argumento\n        b (float): Segundo argumento\n        x (array): Tercer argumento\n        w (array): Cuarto argumento\n\n    Returns:\n        Arrays (array): Retorna dos arrays, con el ajuste de los vectores a los intervalos dados\n\n    \"\"\"\n    return 0.5 * (b - a) * x + 0.5 * (b + a), 0.5 * (b - a) * w\n</code></pre>"}]}